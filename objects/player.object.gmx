<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-3</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>s_charmask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>player_loaded = controller.load_player
loading_time = 0

is_enemy = false

image_speed = 2/room_speed

inventory = ds_list_create()
messages = ds_list_create()
equipped = ds_list_create()
spells = ds_list_create()
perks_gained = ds_list_create()
perks_list = ds_list_create()
buffs = ds_grid_create(0,2)

weapon = item.short_sword
armor = item.old_shirt
shield = item.pot_lid

wep_color = c_gray
armor_color = c_gray
shield_olor = c_gray

ds_grid_clear(buffs,buff.none)

repeat(10)
{
    ds_list_insert(messages,0,"")
}

if(player_loaded) 
{
    loading_time = 120
    load_game()
    weapon = ds_list_find_value(equipped, 0)
    armor = ds_list_find_value(equipped,1)
    shield = ds_list_find_value(equipped, 2)
    
    sprite_index = global.class_index[# job, class_stat.sprite]
}
else
{
    loading_time = 120
    randomize()
    
    for(i = 1; i &lt; perk.total; i++)
    {
        ds_list_add(perks_list, i)
    }
    ds_list_shuffle(perks_list)
    
    spd = 3
    
    job = controller.char_index
    
    ds_list_insert(messages,0,"Welcome to Sargoza.")
    ds_list_insert(messages,0,"Go north for the dungeon.")
    ds_list_insert(messages,0,"Press [Tab] or [Start] for help.")
    
    //ds_list_add(inventory, item.ration, item.medkit, item.small_heal_potion)
    ds_list_add(inventory, item.ration, item.medkit, item.small_heal_potion)
    if(job = class.arcanist) repeat(2) ds_list_add(inventory, item.mana_treat)
    if(job = class.slayer) repeat(2) ds_list_add(inventory, item.distilled_essence)
    
    ds_list_add(spells,spell.town_port)
    if(job = class.arcanist) ds_list_add(spells, spell.fireball, spell.ice_ball, spell.mend)
    else if(job = class.slayer) ds_list_add(spells, spell.concentrate, spell.essence_edge, spell.infernal_armor, spell.hellfire, spell.demon_form)
    else if(job = class.rogue) ds_list_add(spells, spell.stealth)
    
    max_hp = global.class_index[# job, class_stat.hp]
    hp = max_hp
    
    max_energy = global.class_index[# job, class_stat.energy]
    energy = max_energy
    
    strength = global.class_index[# job, class_stat.strength]
    wisdom = global.class_index[# job, class_stat.wisdom]
    perception = global.class_index[# job, class_stat.perception]
    dexterity = global.class_index[# job, class_stat.dexterity]
    
    max_xp = 65
    xp = 0
    
    turns = 0
    
    weapon = global.class_index[# job, class_stat.start_weapon]
    armor = global.class_index[# job, class_stat.start_armor]
    shield = global.class_index[# job, class_stat.start_shield]
    
    ds_list_insert(equipped, 0, weapon)
    ds_list_insert(equipped, 1, armor)
    ds_list_insert(equipped, 2, shield)
    
    
    status = "OK"
    if(job = class.useless) money = 0
    else money = 200
    
    sprite_index = global.class_index[# job, class_stat.sprite]
    
    cut = 0
    pierce = 0
    blunt = 0
    magic = 0
    
    defense = 0
    block = 0
    cut_resist = 0
    pierce_resist = 0
    blunt_resist = 0
    magic_resist = 0
    
    name = controller.char_name
    lvl = 1
    
    kills = 0

    highest_floor = 1
    
    if(job = class.soldier) ammo = 50
    else ammo = 0
    
    total_money = money
    days = 0
    total_dmg = 0
    total_dmg_dealt = 0
    essence = 0
    
    instance_create(x,y,welcome_screen)
    with(floor_warp) instance_destroy()
    controller.hour = 8
    controller.minute = 0
    
    wight_wait = false
}

defense = 0
block = 0

if(job = class.soldier) max_ammo = 60
else max_ammo = 30

demon_form = false
berserking = false

health_gain = 0
energy_gain = 0

rage = 0

inf_armor_time = 0
essence_edge_time = 0
demon_form_time = 0
rested_time = 0
gold_on_hit_timer = 0
double_resist_timer = 0
enchanted_wep_timer = 0
second_chance_timer = 0
guardian_angel_timer = 0

moved = 0
invincibility_timer = 0

key_timer = 0
key_delay = 8

helpShow = 0
debugShow = 0

base_cut_resist = 0.75
base_pierce_resist = 0.75
base_blunt_resist = 0.75
base_magic_resist = 0.75

inventory_limit = floor(strength/15) + 8
fov = (floor(perception/10) + 4)*sprite_width

godmode_enabled = false

instance_create(0,0, console)

teleporting = -1
enemy_spawn_chance = 0
enemy_percent = 0
floors = 0
hunger_time = 0
berserk_timer = 0
sated_timer = 0
blood_consumed = 0
hunger_max = 20

draw_char_sheet = false

cut = 0
pierce = 0
blunt = 0
magic = 0

stealth_timer = 0

if(highest_floor &lt; 6) with(floor_warp) instance_destroy()

max_level = 50
played_time = 0

poison_time = 0

rainbow_color = make_colour_rgb(irandom(255), irandom(255), irandom(255))

perk_page = 0
max_perk_page = 0

move_diagonal = false
day_passed = false

angel_heal_timer = 0
current_money = money

money_timer = 0
can_move = true
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(played_time &lt; 120) played_time++
else played_time = 31

if(loading_time &lt; 5)
{
    //Keeping stats in variables for ease of reference
    if(played_time &gt; 31)
    {
        if(cut = undefined or weapon = undefined) cut = 0
        else cut = global.item_index[# weapon, item_stat.cut]
        
        if(pierce = undefined or weapon = undefined) pierce = 0
        else pierce = global.item_index[# weapon, item_stat.pierce]
        
        if(blunt = undefined or weapon = undefined) blunt = 0
        else blunt = global.item_index[# weapon, item_stat.blunt]
        
        if(magic = undefined or weapon = undefined) magic = 0
        else magic = global.item_index[# weapon, item_stat.magic]
        
        if(armor = undefined or defense = undefined) defense = 0
        else defense = global.item_index[# armor, item_stat.defense]
        if(shield = undefined or block = undefined) 
        {
            block = 0
            mitigated = 0
        }
        else 
        {   
            block = global.item_index[# shield, item_stat.block]
            mitigated = global.item_index[# shield, item_stat.mitigated]
        }
        if(armor = undefined)
        {
            cut_resist = 0
            pierce_resist = 0
            blunt_resist = 0
            magic_resist = 0
        }
        else
        {
            cut_resist = global.item_index[# armor, item_stat.cut_resist]
            pierce_resist = global.item_index[# armor, item_stat.pierce_resist]
            blunt_resist = global.item_index[# armor, item_stat.blunt_resist]
            magic_resist = global.item_index[# armor, item_stat.magic_resist]
        }
    }
    else if(played_time &lt; 30 and loading_time &gt; 60)
    {
        cut = 0
        blunt = 0
        pierce = 0
        magic = 0
        
        defense = 0
        block = 0
        mitigated = 0
        cut_resist = 0
        pierce_resist = 0
        blunt_resist = 0
        magic_resist = 0
    }
}


if(armor = item.none)
{
    if(list_contains(perks_gained, perk.naturalist))
    {
        cut_resist = 1.2
        pierce_resist = 1.2
        blunt_resist = 1.2
        magic_resist = 1.2
    }
    else 
    {
        cut_resist = base_cut_resist
        pierce_resist = base_pierce_resist
        blunt_resist = base_blunt_resist
        magic_resist = base_magic_resist
    }
}

if(hp &lt; 0) hp = 0
if(hp &gt; max_hp) hp = max_hp
if(energy &lt; 0) energy = 0
if(energy &gt; max_energy) energy = max_energy

if(rage &lt; 0) 
{
    rage = 0
    berserking = false
}

if(rage &gt; 255) 
{
    rage = 255
    berserking = true
    ds_list_insert(messages, 0, "BERSERKER RAAAAGE!")
}
if(essence &gt; 100) essence = 100

inventory_limit = floor(strength/15) + 10
if(list_contains(perks_gained, perk.extra_pockets)) inventory_limit += 3
if(list_contains(perks_gained, perk.communist)) inventory_limit += 1 
if(weapon != item.staff_sight) fov = (floor(perception/30) + 4)*sprite_width
else fov = (floor(perception/30) + 5)*sprite_width

if(godmode_enabled) 
{
hp = max_hp
energy = max_energy
}

if(hp &lt;= 0 and !godmode_enabled) 
{
    if(wight_wait)
    {
        status = "SKEL"
        max_hp = 500
        hp = max_hp
        room = town
        x = 464
        y = 528
        lvl = 1
        xp = 0
        max_xp = 65
        money = round(money/2)
        dexterity = round(dexterity/2)
        perception = round(perception/2)
        strength = round(strength/2)
        wisdom = round(wisdom/3)
        
        for(i = 0; i &lt; ds_list_size(equipped); i++)
        {
            ds_list_replace(equipped, i, item.none)
        }
        
        days += 7
        controller.hour = 4
        controller.minute = 44
        
        ds_list_clear(perks_gained)
        ds_list_clear(perks_list)
        ds_list_clear(inventory)
        ds_list_add(inventory, item.none)
        weapon = item.none
        shield = item.none
        armor = item.none
        for(i = 1; i &lt; perk.total; i++)
        {
            ds_list_add(perks_list, i)
        }
        ds_list_shuffle(perks_list)
    }
    else
    {
        hp = 0
        file_delete("save.sav")
        instance_change(player_corpse, true)
        with(player_corpse)
        {
            total_money = player.total_money
            total_dmg_dealt = player.total_dmg_dealt
            kills = player.kills
            days = player.days
            lvl = player.lvl
            perks_gained = player.perks_gained
        }
    }
}

if(money &gt; 9999999999) money = 9999999999
if(total_money &gt; 9999999999) total_money = 9999999999

if(dexterity &gt; 999) dexterity = 999
if(strength &gt; 999) strength = 999
if(perception &gt; 999) perception = 999
if(wisdom &gt; 999) wisdom = 999

if((hp/max_hp) &lt;= 0.05 and room != town)
{
    if(list_contains(perks_gained, perk.guardian_angel) and guardian_angel_timer = 0)
    {
        warp_tile = instance_find(floor_tile, irandom(instance_number(floor_tile)-1))
        x = warp_tile.x
        y = warp_tile.y
        guardian_angel_timer = 180
        invincibility_timer = 15
        ds_list_insert(messages, 0, "Your Guardian Angel whisks you away!")
        gain_buff(buff.invincibility, 15)
        gain_buff(buff.guardian_angel_debuff, 180)
        if(hp &lt;= 0) hp = 1 
    }
} 

if(list_contains(perks_gained, perk.instant_gratification)) xp = 0

max_perk_page = floor(ds_list_size(perks_gained)/10)

if(lvl = max_level) xp = 0

if(current_money &lt; money)
{
    if(money - current_money &gt; 1000) current_money += 1000
    else if(money - current_money &gt; 100) current_money += 100
    else if(money - current_money &gt; 10) current_money += 10
    else current_money++
}
else if(current_money &gt; money) 
{
    if(current_money - money &gt; 1000) current_money -= 1000
    else if(current_money - money &gt; 100) current_money -= 100
    else if(current_money - money &gt; 10) current_money -= 10
    else current_money--
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>upKey = keyboard_check_pressed(vk_up) or keyboard_check_pressed(vk_numpad8) or gamepad_button_check_pressed(0, gp_padu)
downKey = keyboard_check_pressed(vk_down) or keyboard_check_pressed(vk_numpad2) or gamepad_button_check_pressed(0, gp_padd)
leftKey = keyboard_check_pressed(vk_left) or keyboard_check_pressed(vk_numpad4) or gamepad_button_check_pressed(0, gp_padl)
rightKey = keyboard_check_pressed(vk_right) or keyboard_check_pressed(vk_numpad6) or gamepad_button_check_pressed(0, gp_padr)
diagRightUp = keyboard_check_pressed(vk_numpad9)
diagRightDown = keyboard_check_pressed(vk_numpad3)
diagLeftUp = keyboard_check_pressed(vk_numpad7)
diagLeftDown = keyboard_check_pressed(vk_numpad1)
upKeyHeld = keyboard_check(vk_up) or keyboard_check(vk_numpad8) or gamepad_button_check(0, gp_padu)
downKeyHeld = keyboard_check(vk_down) or keyboard_check(vk_numpad2) or gamepad_button_check(0, gp_padd)
leftKeyHeld = keyboard_check(vk_left) or keyboard_check(vk_numpad4) or gamepad_button_check(0, gp_padl)
rightKeyHeld = keyboard_check(vk_right) or keyboard_check(vk_numpad6) or gamepad_button_check(0, gp_padr)
diagRightUpHeld = keyboard_check(vk_numpad9)
diagRightDownHeld = keyboard_check(vk_numpad3)
diagLeftUpHeld = keyboard_check(vk_numpad7)
diagLeftDownHeld = keyboard_check(vk_numpad1)
waitKey = keyboard_check_pressed(vk_decimal) or keyboard_check_pressed(vk_numpad5) or keyboard_check_pressed(vk_space) or gamepad_button_check_pressed(0, gp_face3)
waitKeyHeld = keyboard_check(vk_decimal) or keyboard_check(vk_numpad5) or keyboard_check(vk_space) or gamepad_button_check(0, gp_face3)
stairsKey = keyboard_check_pressed(vk_shift) or gamepad_button_check_pressed(0, gp_face4)
helpKey = keyboard_check_pressed(vk_tab) or gamepad_button_check_pressed(0, gp_start)
debugKey = keyboard_check_pressed(ord("1"))
lookKey = keyboard_check_pressed(ord("L")) or gamepad_button_check_pressed(0, gp_stickl)
fireKey = keyboard_check_pressed(ord("F")) or gamepad_button_check_pressed(0, gp_shoulderlb)
console_key = keyboard_check_pressed(vk_ralt)
diagonalSwitchKey = keyboard_check_pressed(ord("D")) or gamepad_button_check_pressed(0, gp_stickr)

//if(played_time%120 = 0 and loading_time = 0) ds_list_delete(perks_list,0)

/*if(keyboard_check_pressed(ord("P")) and !console.vis)
{
    if(!instance_exists(perk_menu)) instance_create(x,y,perk_menu)
    else with(perk_menu) instance_destroy()
}*/

if(console_key) 
{
    if(console.vis) console.vis = false
    else console.vis = true
}

if(diagonalSwitchKey and !console.vis and !instance_exists(menu_parent))
{
    if(move_diagonal) move_diagonal = false
    else move_diagonal = true
}

if(draw_char_sheet)
{
    if(max_perk_page &gt; 0)
    {
        if(floor(ds_list_size(perks_gained)/10) = (ds_list_size(perks_gained)/10))
        {
            if(rightKey)
            {
                if(perk_page &lt; max_perk_page-1) perk_page++
                else perk_page = 0  
            }
            if(leftKey)
            {
                if(perk_page &gt; 0) perk_page--
                else perk_page = max_perk_page-1
            }
        }
        else
        {
            if(rightKey)
            {
                if(perk_page &lt; max_perk_page) perk_page++
                else perk_page = 0  
            }
            if(leftKey)
            {
                if(perk_page &gt; 0) perk_page--
                else perk_page = max_perk_page
            }
        }
    }
}

if(loading_time = 0 and !draw_char_sheet and !instance_exists(menu_parent) and !console.vis and !instance_exists(hurt_text) and !instance_exists(selector_parent) and !instance_exists(dungeon_carver) and !instance_exists(welcome_screen) and !instance_exists(changelog_screen) and can_move)
{
    if(upKey or (upKeyHeld and canPress))
    {
        if(!move_diagonal)
        {
            if(!place_meeting(x,y-sprite_width,blocked_tile))
            {
                if(place_meeting(x,y-sprite_width,interactable))
                {
                    with(instance_place(x,y-sprite_width,interactable)) interact_with_player()
                }
                else 
                {
                    y -= sprite_width
                    moved = 1
                }
            }
        }
        else
        {
            if(!place_meeting(x+sprite_width,y-sprite_width,blocked_tile))
            {
                if(place_meeting(x+sprite_width,y-sprite_width,interactable))
                {
                    with(instance_place(x+sprite_width,y-sprite_width,interactable)) interact_with_player()
                }
                else 
                {
                    x += sprite_width
                    y -= sprite_width
                    moved = 1
                }
            }
        }
    }
    
    else if(downKey or (downKeyHeld and canPress))
    {
        if(!move_diagonal)
        {
            if(!place_meeting(x,y+sprite_width,blocked_tile))
            {
                if(place_meeting(x,y+sprite_width,interactable))
                {
                    with(instance_place(x,y+sprite_width,interactable)) interact_with_player()
                }
                else 
                {
                    y += sprite_width
                    moved = 1
                }
            }
        }
        else
        {
            if(!place_meeting(x-sprite_width,y+sprite_width,blocked_tile))
            {
                if(place_meeting(x-sprite_width,y+sprite_width,interactable))
                {
                    with(instance_place(x-sprite_width,y+sprite_width,interactable)) interact_with_player()
                }
                else 
                {
                    x -= sprite_width
                    y += sprite_width
                    moved = 1
                }
            }
        }
    }
    
    else if(rightKey or (rightKeyHeld and canPress))
    {
        if(!move_diagonal)
        {
            if(!place_meeting(x+sprite_width,y,blocked_tile))
            {  
                if(place_meeting(x+sprite_width,y,interactable))
                {
                    with(instance_place(x+sprite_width,y,interactable)) interact_with_player()
                }
                else 
                {
                    x += sprite_width
                    moved = 1
                }
            }
        }
        else
        {
            if(!place_meeting(x+sprite_width,y+sprite_width,blocked_tile))
            {
                if(place_meeting(x+sprite_width,y+sprite_width,interactable))
                {
                    with(instance_place(x+sprite_width,y+sprite_width,interactable)) interact_with_player()
                }
                else 
                {
                    x += sprite_width
                    y += sprite_width
                    moved = 1
                }
            }
        }
    }
    
    else if(leftKey or (leftKeyHeld and canPress))
    {   
        if(!move_diagonal)
        {
            if(!place_meeting(x-sprite_width,y,blocked_tile))
            {
                if(place_meeting(x-sprite_width,y,interactable))
                {
                    with(instance_place(x-sprite_width,y,interactable)) interact_with_player()
                }
                else 
                {
                    x -= sprite_width
                    moved = 1
                }
            }
        }
        else
        {
            if(!place_meeting(x-sprite_width,y-sprite_width,blocked_tile))
            {
                if(place_meeting(x-sprite_width,y-sprite_width,interactable))
                {
                    with(instance_place(x-sprite_width,y-sprite_width,interactable)) interact_with_player()
                }
                else 
                {
                    x -= sprite_width
                    y -= sprite_width
                    moved = 1
                }
            }
        }
    }
    
    else if(diagRightUp or (diagRightUpHeld and canPress))
    {
        if(!place_meeting(x+sprite_width,y-sprite_width,blocked_tile))
        {
           if(place_meeting(x+sprite_width,y-sprite_width,interactable))
            {
                with(instance_place(x+sprite_width,y-sprite_width,interactable)) interact_with_player()
            }
            else 
            {
                x += sprite_width
                y -= sprite_width
                moved = 1
            }
        }
    }
        
    else if(diagRightDown or (diagRightDownHeld and canPress))
    {
        if(!place_meeting(x+sprite_width,y+sprite_width,blocked_tile))
        {
            if(place_meeting(x+sprite_width,y+sprite_width,interactable))
            {
                with(instance_place(x+sprite_width,y+sprite_width,interactable)) interact_with_player()
            }
            else 
            {
                x += sprite_width
                y += sprite_width
                moved = 1
            }
        }
    }
    
    else if(diagLeftUp or (diagLeftUpHeld and canPress))
    {
        if(!place_meeting(x-sprite_width,y-sprite_width,blocked_tile))
        {
            if(place_meeting(x-sprite_width,y-sprite_width,interactable))
            {
                with(instance_place(x-sprite_width,y-sprite_width,interactable)) interact_with_player()
            }
            else 
            {
                x -= sprite_width
                y -= sprite_width
                moved = 1
            }
        }
    }
    
    else if(diagLeftDown or (diagLeftDownHeld and canPress))
    {
        if(!place_meeting(x-sprite_width,y+sprite_width,blocked_tile))
        {
            if(place_meeting(x-sprite_width,y+sprite_width,interactable))
            {
                with(instance_place(x-sprite_width,y+sprite_width,interactable)) interact_with_player()
            }
            else 
            {
                x -= sprite_width
                y += sprite_width
                moved = 1
            }
        }
    }
}

if(loading_time = 0 and (moved or waitKey or (waitKeyHeld and canPress)) and !console.vis and !draw_char_sheet and !instance_exists(menu_parent))
{
    key_timer = 0
    controller.minute++
    hunger_time++
    
    if(global.item_index[# weapon, item_stat.tier] = 6)
    {
        angel_heal_timer++
        if(angel_heal_timer = 20)
        {
            hp += round(max_hp*0.01)
            angel_heal_timer = 0
        }
    }
    
    with(enemy_parent)
    {
        if(slow_time &gt; 0) slow_time--
        if(slow_time = 1) spd = round(spd/2)
    }
    
    enemy_spawn_chance++
    enemy_percent = irandom(100000)
    if(enemy_percent &lt; enemy_spawn_chance and floors &gt; 0)
    {
        ds_list_insert(console.console_messages, 0, "Enemies spawned at " + string(controller.hour) + ":" + string(controller.minute))
        enemy_spawn_chance = 0
        for(i = 0; i &lt; irandom(1)+1; i++)
        {
            tile_spawn = instance_find(floor_tile,irandom(instance_number(floor_tile)))
            with(tile_spawn) 
            {
                with(instance_create(x,y,enemy_parent))
                {
                    if(player.floors &lt; 6) pool = global.foyer_pool
                    else if(player.floors &lt; 11) pool = global.mines_pool
                    else if(player.floors &lt; 16) pool = global.graveyard_pool
                    else if(player.floors &lt; 21) pool = global.barracks_pool
                    else pool = global.universal_pool
                    spawn_enemy(x,y,pool[irandom(array_length_1d(pool)-1)])   
                    x = other.x
                    y = other.y
                    x1 = x
                    y1 = y
                }
            }
        }
    }
    
    if(room != town)
    {
        if(ds_grid_get(buffs,0,0) != buff.none) check_buffs()
        if(inf_armor_time &gt; 0) inf_armor_time--
        if(essence_edge_time &gt; 0) essence_edge_time--
        if(gold_on_hit_timer &gt; 0) gold_on_hit_timer--
        if(double_resist_timer &gt; 0) double_resist_timer--
        if(enchanted_wep_timer &gt; 0) enchanted_wep_timer--
        if(berserk_timer &gt; 0) berserk_timer--
        
        if(demon_form_time &gt; 0) 
        {
            if(demon_form_time%3 = 0) hp += round(max_hp*0.008)
            demon_form_time--
        }
        if(rested_time &gt; 0) rested_time--
        if(rage &gt; 0 and !berserking and controller.minute%3 = 0) rage--
        else if(berserking) rage -= 15
        
        if(stealth_timer &gt; 0) stealth_timer--
        
        if(invincibility_timer &gt; 0) invincibility_timer--
        
        if(teleporting &gt; 0) teleporting--
        if(teleporting = 0)
        {
            room_goto(town)
            x = 848
            y = 400
            floors = 0
            teleporting--
        }
        
        if(rested_time &gt; 0 and rested_time % 20 = 0) hp += round(max_hp*0.03)
    }
    with(enemy_parent) act()
    
    if(shield = item.druidic_shield) hunger_max = 30
    else if(status = "VAMP") hunger_max = 10
    else hunger_max = 20
    
    if(blood_consumed = 5)
    {
        blood_consumed = 0
        sated_timer = 30
        gain_buff(buff.sated, 30)
    }
    
    if(sated_timer &gt; 0) sated_timer--
    
    if(hunger_time &gt;= hunger_max and energy &gt; 0 and room != town) 
    {
        if(status = "VAMP")
        {
            if(blood_consumed &gt; 0) blood_consumed--
        }
        if(status != "SKEL") energy--
        hunger_time = 0
    }
    else if(controller.minute%10 = 0 and energy = 0 and room != town) 
    {
        hp -= round(max_hp*0.01)
        ds_list_insert(messages,0, "You're starving! Eat something!")
        with(instance_create(x,y-16,hurt_text))
        {
            val = "Starving!"
            color = c_red
        }
    }
    
    if(second_chance_timer &gt; 0) second_chance_timer--
    if(guardian_angel_timer &gt; 0) guardian_angel_timer--
    
    if(instance_exists(magic_pillar_obj)) magic_pillar_obj.active = true
    
    if(poison_time &gt; 0)
    {
        poison_time--
        hp -= round(max_hp*0.01)
        with(instance_create(x, y-((instance_number(hurt_text)*16)+8), hurt_text))
        {   
            val = round(player.max_hp*0.01)
            color = c_olive
        }
    }
    
    moved = 0
}

if(!console.vis and !instance_exists(dungeon_carver) and!instance_exists(welcome_screen) and !instance_exists(changelog_screen) and loading_time = 0)
{
    if((keyboard_check_pressed(ord("C")) or gamepad_button_check_pressed(0, gp_select)) and !instance_exists(look_selector) and !instance_exists(shoot_selector) and !instance_exists(spell_selector))
    {
        if(instance_exists(menu_parent)) with(menu_parent) instance_destroy()
        if(draw_char_sheet) draw_char_sheet = false
        else 
        {
            perk_page = 0
            draw_char_sheet = true
        }
    }
    if(fireKey and !instance_exists(menu_parent) and !instance_exists(look_selector) and !instance_exists(shoot_selector) and !instance_exists(spell_selector))
    {
        if(global.item_index[# weapon, item_stat.wep_type] != weapon_type.gun) ds_list_insert(messages, 0, "You don't have a gun equipped!")
        else if(!instance_exists(selector_parent) and !instance_exists(menu_parent)) 
        {
            nearest_search = player
            if(instance_exists(enemy_parent)) nearest_search = instance_nearest(x,y,enemy_parent)
            if(point_distance(x,y,nearest_search.x,nearest_search.y) &lt; (fov+32) and !collision_line(x,y,nearest_search.x,nearest_search.y, wall, true, true))
            {
                instance_create(nearest_search.x,nearest_search.y,shoot_selector)
            }
            else instance_create(x,y,shoot_selector)
        }
        draw_char_sheet = false
    }
    if(helpKey)
    {
        if(helpShow) helpShow = 0
        else helpShow = 1
    }

    if(lookKey and !instance_exists(look_selector) and !instance_exists(menu_parent) and !instance_exists(shoot_selector) and !instance_exists(spell_selector)) instance_create(x,y,look_selector)

    if((keyboard_check_pressed(ord("I")) or gamepad_button_check_pressed(0, gp_shoulderr)) and !instance_exists(look_selector) and !instance_exists(shoot_selector) and !instance_exists(spell_selector))
    {
        draw_char_sheet = false
        if(!instance_exists(menu_parent)) instance_create(x,y,inventory_box)
        else 
        {
            if(instance_exists(unequip_box)) with(unequip_box) instance_change(inventory_box, true)
            else if(instance_exists(spell_box)) with(spell_box) instance_change(inventory_box,true)
            else with(inventory_box) instance_destroy()
        }
    }
    
    if((keyboard_check_pressed(ord("S")) or gamepad_button_check_pressed(0, gp_shoulderl)) and !instance_exists(look_selector) and !instance_exists(shoot_selector) and !instance_exists(spell_selector))
    {
        draw_char_sheet = false
        if(!instance_exists(menu_parent)) instance_create(x,y,spell_box)
        else 
        {
            if(instance_exists(unequip_box)) with(unequip_box) instance_change(spell_box, true)
            else if(instance_exists(inventory_box)) with(inventory_box) instance_change(spell_box,true)
            else with(spell_box) instance_destroy()
        }
    }
    
    if((keyboard_check_pressed(ord("U")) or gamepad_button_check_pressed(0, gp_shoulderrb)) and !instance_exists(look_selector) and !instance_exists(shoot_selector) and !instance_exists(spell_selector))
    {
        draw_char_sheet = false
        if(!instance_exists(menu_parent)) instance_create(x,y,unequip_box)
        else 
        {
            if(instance_exists(inventory_box)) with(inventory_box) instance_change(unequip_box, true)
            else with(unequip_box) instance_destroy()
        }
    }
}

//if(keyboard_check_pressed(ord("R")) and !instance_exists(menu_parent)) room_restart()

if(stairsKey and!console.vis)
{
    if(room = town)
    {
        if(place_meeting(x,y,stairs)) 
        {
            room_goto(dungeon)
            x=0
            y=0
            floors = 1
            if(list_contains(perks_gained, perk.sneaking_mission))
            {
                stealth_timer += 30
                gain_buff(buff.stealth, 30)
            }
        } 
        if(place_meeting(x,y,floor_warp))
        {
            instance_create(x,y,warp_menu)
        }  
    }
    else
    {
        if(place_meeting(x,y,stairs)) 
        {
            room_restart()
            x = 0
            y = 0
            floors++
            if(list_contains(perks_gained, perk.sneaking_mission))
            {
                stealth_timer += 30
                gain_buff(buff.stealth, 30)
            }
            if(floors &gt; highest_floor) highest_floor = floors
        }
        if(place_meeting(x,y,town_checkpoint))
        {
            room_goto(town)
            x = 848
            y = 400
            floors = 0
            if(teleporting &gt; 0) 
            {
                teleporting = 0
                
            }
        }
    }
}

if(keyboard_check_pressed(vk_escape) or gamepad_button_check_pressed(0, gp_start) or gamepad_button_check_pressed(0, gp_face2)) 
{   
    if(instance_exists(menu_parent))
    {
        with(menu_parent) 
        {   
            if(inventory_name != "Perk Time!") instance_destroy()    
        }
    }
    else if(draw_char_sheet) draw_char_sheet = false
    else if(instance_exists(spell_selector))
    {
        with(spell_selector) instance_destroy()
        ds_list_insert(messages, 0, "Cast cancelled.")
    }
    else if(instance_exists(look_selector))
    {
        with(look_selector) instance_destroy()
        ds_list_insert(messages, 0, "You stop looking around.")
    }
    else if(instance_exists(shoot_selector))
    {
        with(shoot_selector) instance_destroy()
        ds_list_insert(messages, 0, "You lower your gun.")
    }
    else if(console.vis) {}
    else 
    {
        if(!instance_exists(welcome_screen) and !instance_exists(changelog_screen)) instance_create(x,y,play_menu)
    }
}
canPress = (key_timer = key_delay)

if(key_timer &lt; key_delay) key_timer++

if(place_meeting(x,y,gold))
{
    pickup = instance_place(x,y,gold)
    money += pickup.value
    total_money += pickup.value
    if(!audio_is_playing(sfx_pickup)) audio_play_sound(sfx_pickup, 2, 0)
    ds_list_insert(messages,0, "You pick up " + string(pickup.value) + " Zun.")
    if(global.item_notifications) 
    {
        with(item_notification) y -= 64
        with(instance_create(50,1000,item_notification))
        {
            item_graphic = other.pickup.sprite_index
            item_sub_graphic = other.pickup.image_index
            item_name = string(other.pickup.value) + " Zun"
            item_color = player.c_gold
        }
    }
    with(pickup) instance_destroy()
}

if(place_meeting(x,y,ammunition))
{
    if(ammo &lt; max_ammo)
    {
        pickup = instance_place(x,y,ammunition)
        ammo += pickup.value
        if(!audio_is_playing(sfx_pickup)) audio_play_sound(sfx_pickup, 2, 0)
        ds_list_insert(messages,0, "You pick up " + string(pickup.value) + " bullets.")
        if(global.item_notifications) 
        {
            with(item_notification) y -= 64
            with(instance_create(50,1000,item_notification))
            {
                item_graphic = other.pickup.sprite_index
                item_sub_graphic = other.pickup.image_index
                item_name = string(other.pickup.value) + " Ammo"
                item_color = c_ltgray
            }
        }
        with(pickup) instance_destroy()
    }
}

if(xp &gt;= max_xp) level_up()

if(ds_list_size(inventory) = 0) ds_list_add(inventory, "Nothing")

//Center on player
view_xview=x-view_wview/2-10
view_yview = y-view_hview/2-10

view_xview=clamp(view_xview,0,room_width-view_wview)
view_yview=clamp(view_yview,0,room_height-view_hview)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="item_parent">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(x != xprevious or y != yprevious)
{
        ds_list_insert(messages,0, "You walk on the " + string(global.item_index[# other.iid, item_stat.name]) + ".")
}
if((keyboard_check_pressed(ord("G")) or gamepad_button_check_pressed(0, gp_face1))  or (global.loot_pickup = true and (x != xprevious or y != yprevious)) and !console.vis)
{
    if(ds_list_size(inventory) &lt; inventory_limit)
    {
        item_added = other.iid
        if(ds_list_find_value(inventory, 0) = item.none) ds_list_replace(inventory,0, item_added)
        else ds_list_add(inventory, item_added)
        ds_list_insert(messages,0, "You pick up the " + string(global.item_index[# other.iid, item_stat.name]) + ".")
        with(other) instance_destroy()
        if(global.item_notifications) 
        {
            with(item_notification) y -= 64
            with(instance_create(50,1000,item_notification))
            {
                item_graphic = global.item_index[# other.item_added, item_stat.sprite]
                item_name = global.item_index[# other.item_added, item_stat.name]
                item_color = controller.tier[global.item_index[# other.item_added, item_stat.tier]]
            }
        }
        if(!audio_is_playing(sfx_pickup)) audio_play_sound(sfx_pickup, 2, 0)
    }
    else ds_list_insert(messages,0, "Your pack is full!")
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>display_set_gui_size(1920,1080)

draw_set_color(c_black)
draw_rectangle(-1,0,1920,156,false)
draw_set_color(c_white)

if(instance_exists(dungeon_carver))
{
    draw_set_color(c_black)
    draw_rectangle(-1,0,1920,1080,false)
    draw_set_color(c_white)
}

draw_set_halign(fa_left)
draw_set_valign(fa_left)

if(!instance_exists(welcome_screen) and loading_time = 0)
{
    brown_color = make_color_rgb(139,69,19)
    
    draw_set_font(hud_font)
    
    if(job = class.berserker or job = class.slayer)
    {
        
        
        draw_sprite(s_resource_back, 0, 360, 1)
        if(job = class.berserker) 
        {
            draw_sprite_ext(s_resource,0,360,1, (rage/255), 1, 0, c_maroon, 1)
            draw_set_color(c_white)
            draw_set_halign(fa_left)
            draw_text(362, 10, "RAGE: " + string(round((rage/255)*100)) + "%")
        }
        if(job = class.slayer) 
        {
            draw_sprite_ext(s_resource,0,360,1, (essence/100), 1, 0, c_olive, 1)
            draw_set_color(c_white)
            draw_set_halign(fa_left)
            draw_text(362, 10, "ESSENCE: " + string(essence) + "%")
        }
        draw_sprite(s_resource_front, 0, 360, 1)
    }
    
    draw_sprite(s_barback,0,50,32)
    draw_sprite(s_barback,0,50,58)
    draw_sprite(s_barback,0,50,84)
    
    draw_text(50,1, name)
    if(room = dungeon) draw_text(250,1, "Flr " + string(floors))
    else draw_text(235,1,"Sargoza")
    
    draw_text(50, 16, global.class_index[# job, class_stat.name])
    draw_text(250, 16, "Lvl " + string(lvl))
    
    draw_sprite_ext(s_bar,0,50,32,(hp/max_hp),1,0,c_red,1)
    draw_sprite_ext(s_bar,0,50,58,(energy/max_energy),1,0,brown_color,1)
    if(lvl &lt; 99 and xp &lt;=max_xp) draw_sprite_ext(s_bar,0,50,84,(xp/max_xp),1,0,c_fuchsia,1)
    else draw_sprite_ext(s_bar,0,50,84,1,1,0,c_fuchsia,1)
    
    draw_sprite(s_barfront,0,50,32)
    draw_sprite(s_barfront,0,50,58)
    draw_sprite(s_barfront,0,50,84)
    
    draw_text(4,36,"HP " + string(hp) + "/" + string(max_hp))
    draw_text(4,62,"EN " + string(energy) + "/" + string(max_energy))
    if(!list_contains(perks_gained, perk.instant_gratification))
    {
        if(lvl &lt; max_level) draw_text(4,88,"XP " +string(xp) + "/" + string(max_xp))
        else draw_text(4,88,"XP MAX LEVEL REACHED!")
    }
    else
    {
       draw_text(4,88,"XP INST.GRATIFICATION")
    }
    
    /*
    draw_set_color(c_red)
    draw_text(360,36,"Cut:    " + string(cut))
    //draw_text(560, 36, "Resist: " + string(round((cut_resist-1)*100)) + "%")
    
    draw_set_color(c_orange)
    draw_text(360,62,"Pierce: " + string(pierce))
    //draw_text(560, 62, "Resist: " + string(round((pierce_resist-1)*100)) + "%")
    
    draw_set_color(c_ltgray)
    draw_text(360,88,"Blunt:  " + string(blunt))
    //draw_text(560, 88, "Resist: " + string(round((blunt_resist-1)*100)) + "%")
    
    draw_set_color(c_purple)
    draw_text(360,114,"Magic:  " + string(magic))
    //draw_text(560, 114, "Resist: " + string(round((magic_resist-1)*100)) + "%")
    
    draw_set_color(c_white)
    draw_text(360, 140, "Def/Blk:" + string(defense) + "/" + string(block) + "%")
    //draw_text(560, 140, "Def:    " + )
    */
    
    draw_set_color(c_red)
    draw_text(48, 114, "Dex: " + string(dexterity))
    
    draw_set_color(c_orange)
    draw_text(224, 114, "Per: " + string(perception))
    
    draw_set_color(c_ltgray)
    draw_text(48,140,"Str: " + string(strength))
    
    draw_set_color(c_purple)
    draw_text(224, 140, "Wis: " + string(wisdom))
    
    draw_set_color(c_white)
    
    if(weapon != undefined) wep_color = controller.tier[global.item_index[# weapon, item_stat.tier]]
    else wep_color = c_white
    
    if(armor != undefined) armor_color = controller.tier[global.item_index[# armor, item_stat.tier]]
    else armor_color = c_white
    
    if(shield != undefined) shield_color = controller.tier[global.item_index[# shield, item_stat.tier]]
    else shield_color = c_white
    
    //if(played_time &gt; 2)
    //{
    //}
    /*else if(played_time &lt; 2)
    {
        wep_color = c_gray
        armor_color = c_gray
        shield_color = c_gray
    }*/
    
    if(loading_time = 0 and player.weapon != undefined and played_time &gt; 10)
    {
        if(global.item_index[# player.weapon, item_stat.wep_type] = weapon_type.gun) draw_text_colour(360,36,  "Weapon: " + string(global.item_index[# weapon, item_stat.name])  + " (" + string(global.item_index[# player.weapon, item_stat.ammo_used]) + "/" + string(ammo) + ")", wep_color, wep_color, wep_color, wep_color, 1)
        else draw_text_colour(360,36,  "Weapon: " + string(global.item_index[# weapon, item_stat.name]), wep_color, wep_color, wep_color, wep_color, 1)
        draw_text_colour(360, 62, "Armor:  " + string(global.item_index[# armor, item_stat.name]), armor_color, armor_color, armor_color,armor_color, 1)
        draw_text_colour(360, 88, "Shield: " + string(global.item_index[# shield, item_stat.name]), shield_color, shield_color, shield_color, shield_color, 1)
    }
    else
    {
        draw_text_colour(360,36,  "Weapon: ", c_white, c_white, c_white, c_white, 1)
        draw_text_colour(360, 62, "Armor:  ", c_white, c_white, c_white, c_white, 1)
        draw_text_colour(360, 88, "Shield: ", c_white, c_white, c_white, c_white, 1)
    }
    
    //x pos for these were at 780
    /*
    if(global.item_index[# weapon, item_stat.wep_type]  = weapon_type.gun) draw_text(600,36,  "Weapon: " + string(global.item_index[# weapon, item_stat.name]) + " (" + string(global.item_index[# weapon, item_stat.ammo_used]) + "/" + string(ammo) +")")
    else draw_text(600,36,  "Weapon: " + string(global.item_index[# weapon, item_stat.name]))
    draw_text(600, 62, "Armor:  " + string(global.item_index[# armor, item_stat.name]))
    draw_text(600, 88, "Shield: " + string(global.item_index[# shield, item_stat.name]))
    */
    
    c_gold = make_color_rgb(218,165,32)
    
    draw_set_color(c_gold)
    draw_text(360,114, "Zun:    " + string(current_money))
    
    draw_set_color(c_white)
    
    if(controller.minute &lt; 10) pad = "0"
    else pad = ""
    
    draw_text(360, 140,"Time:   " + string(controller.hour) + ":" + string(pad) + string(controller.minute))
    
    draw_set_halign(fa_right)
    for(i = 0; i &lt; 9; i++)
    {
        draw_text(1915,132 - (i*16), ds_list_find_value(messages,i))
    }
}
if(helpShow)
{
    draw_set_color(c_black)
    draw_set_halign(fa_left)
    draw_rectangle(1300,176,1920,176+(24*26),false)
    draw_set_color(c_white)
    if(!gamepad_is_connected(0)) draw_text(1302,178,"KEYBOARD HELP:##[Tab]: Help##[Escape]: Main Menu##[Arrow Keys/Numpad]: Move (can be held)##[. or NUMPAD 5 or SPACE]: Wait##[C]: Character Sheet##[D] (In menu): Drop##[I]: Inventory##[U]: Unequip Menu##[L]: Look##[F]: Fire gun##[S]: Spells##[Enter]: Use/Do (Menu Sensitive)##[G]: Pick Up##[Shift]: Ascend Stairs##[X]: Toggle Fullscreen##[Z]: Cycle Resolution##[D]: Toggle diagonal mvmt") 
    else draw_text(1302,178, "GAMEPAD HELP:##[Start]: Help##[B or Start]: Main Menu##[D-PAD]: Move (can be held)##[X]: Wait##[Select]: Characterr Sheet##[X] (In menu): Drop##[RB]: Inventory##[RT]: Unequip menu##[Left Stick Click]: Look##[LT]: Fire gun##[LB]: Spells##[A]: Use/do/pickup##[Y]: Ascend stairs##[Right Stick Click]: Toggle diag mvmt")
}

if(debugShow)
{
    draw_set_color(c_white)
    draw_set_halign(fa_left)
    draw_text(2, 180,"FPS: " + string(fps) + "#X: " + string(x) + "#Y: " + string(y) + "#key_timer: " + string(key_timer) + "#floor_tiles: " + string(instance_number(floor_tile)) + "#enemies: " + string(instance_number(enemy_parent)) + "#items: " + string((instance_number(item_parent))) + "#enemy_spawn_chance: " + string(enemy_spawn_chance) + "#enemy_percent: " + string(enemy_percent) + "#walls: " + string(instance_number(wall)) + "#torches: " + string(instance_number(torch)) + "#hunger_time/hunger_max: " + string(hunger_time) + "/" + string(hunger_max) + "#elite_spawn_chance: " + string((14+floor(player.floors/5) * 2)) + "%#breakables: " + string(instance_number(breakable))+ "#max_perk_page: " +string(max_perk_page))
}
if(!instance_exists(menu_parent))
{
    draw_set_halign(fa_left)
    if(ds_grid_width(buffs) &gt; 0) text_outline(6, 161, "Effects", c_white)
    for(i = 0; i &lt; ds_grid_width(buffs); i++)
    {
        if(ds_grid_width(buffs) &gt; 0)
        {
            //ds_grid_sort(buffs,1,false)
            draw_set_halign(fa_right)
            draw_sprite(global.buff_index[# ds_grid_get(buffs, i, 0), buff_stat.sprite],0,6,176+(80*i))
            text_outline(70,224+(i*80),string(ds_grid_get(buffs,i,1)),c_white)
        }
    }   
}

if(draw_char_sheet)
{
    // inner rect
    draw_set_color(c_black)
    draw_rectangle(10, 175, 1300, 1075, false) 
    draw_rectangle(1052, 175, 1910, 1075, false)
    
    // outline rect
    draw_set_color(c_white)
    draw_rectangle(9,174,1050, 1074, true)
    draw_rectangle(1051,174,1909, 1074, true)
    
    transform_string_1 = ""
    transform_string_2 = ""
    if(status = "VAMP") transform_string_2 = "Vampire"
    if(status = "SKEL") transform_string_1 = " Wight "
    
    draw_set_halign(fa_left)
    draw_text(12, 180, string(name) + ", Level " + string(lvl) + string(transform_string_1) + string(global.class_index[# job, class_stat.name]) + " " + string(transform_string_2))
    draw_text(12, 228, "Damage:")
    draw_set_color(c_red)
    draw_text(12,260, "Cut:    " + string(cut))
    draw_set_color(c_orange)
    draw_text(12,292, "Pierce: " + string(pierce))
    draw_set_color(c_ltgray)
    draw_text(12,324, "Blunt:  " + string(blunt))
    draw_set_color(c_purple)
    draw_text(12, 356, "Magic:  " + string(magic))
    draw_set_color(c_white)
    draw_text(12, 404, "Block:")
    draw_text(12, 388, "        " + string(block) + "% chance")
    draw_text(12, 420, "        " + string(round(mitigated*100)) + "% mitigated")

    draw_set_color(c_white)    
    draw_text(333, 228, "Resists:")
    draw_set_color(c_red)
    draw_text(333,260, "Cut:     " + string(round(cut_resist*100)) + "%")
    draw_set_color(c_orange)
    draw_text(333,292, "Pierce:  " + string(round(pierce_resist*100)) + "%")
    draw_set_color(c_ltgray)
    draw_text(333,324, "Blunt:   " + string(round(blunt_resist*100)) + "%")
    draw_set_color(c_purple)
    draw_text(333, 356, "Magic:   " + string(round(magic_resist*100)) + "%")
    draw_set_color(c_white)
    draw_text(333, 388, "Defense: " + string(defense))
    
    draw_text(653, 228, "Stats:")
    draw_text(653, 260, "Kills: " + string(kills))
    draw_set_color(c_gold)
    draw_text(653, 292, "Total Zun: " + string(total_money)) 
    draw_set_color(c_white)
    draw_text(653, 324, "Days Passed: " + string(days))
    draw_set_color(c_red)
    draw_text(653, 356, "Dmg Dealt: " + string(total_dmg_dealt))
    draw_set_color(c_white)
    draw_text(653,388, "Highest Floor: " + string(highest_floor))
    
    draw_set_color(c_white)
    draw_text(13, 452, "Status Effects:")
    if(ds_grid_get(buffs, 0 ,0) = buff.none) draw_text(313, 484, "None")
    else
    {
        for(i = 0; i &lt; ds_grid_width(buffs); i++)
        {
            if(ds_grid_get(buffs, i, 0) != buff.none)
            {
                buff_name = global.buff_index[# ds_grid_get(buffs, i, 0), buff_stat.name]
                buff_desc = global.buff_index[# ds_grid_get(buffs, i, 0), buff_stat.description]
                draw_text(13, 484+(i*32), string(buff_name) + ": " + string(buff_desc))
            }
        }
    }
    draw_set_halign(fa_center)
    if(max_perk_page = 0 or ds_list_size(perks_gained) &lt; 11) draw_text(1480, 180, "Perks")
    else
    {
        if(perk_page = 0) draw_text(1480, 180, "  Perks (" + string(perk_page+1) + ") &gt;")
        else if(perk_page &gt; 0 and perk_page &lt; max_perk_page and ds_list_size(perks_gained)/10 != floor(ds_list_size(perks_gained)/10)) draw_text(1480, 180, "&lt; Perks (" + string(perk_page+1) + ") &gt;")
        else draw_text(1480, 180, "&lt; Perks (" + string(perk_page+1) + ")  ")
    }
    draw_set_halign(fa_left)
    if(perk_page != max_perk_page)
    {
        for(i = (0+(10*perk_page)); i &lt; (10*(perk_page+1)); i++)
        {
            perk_name = global.perk_index[# ds_list_find_value(perks_gained, i), perk_stats.name]
            perk_desc = global.perk_index[# ds_list_find_value(perks_gained, i), perk_stats.short_description]
            draw_text_ext(1053, 228+((i%10)*88), "* " + string(perk_name) + ": " + string(perk_desc), 24, 850)
        }
    }
    else
    {
        perks_shown = ds_list_size(perks_gained)%10
        for(i = 0+(10*perk_page); i &lt; ((10*perk_page)+perks_shown); i++)
        {
            perk_name = global.perk_index[# ds_list_find_value(perks_gained, i), perk_stats.name]
            perk_desc = global.perk_index[# ds_list_find_value(perks_gained, i), perk_stats.short_description]
            draw_text_ext(1053, 228+((i%10)*88), "* " + string(perk_name) + ": " + string(perk_desc), 24, 850)
        }
    }
}
if(loading_time &gt; 0)
{
    loading_time--
    draw_set_color(c_black)
    draw_rectangle(-1,-1,1921,1081,false)
    draw_set_color(c_white)
    draw_set_font(menu_font)
    draw_set_halign(fa_center)
    draw_set_valign(fa_center)
    draw_text(960,540,"Loading...")
}

draw_set_font(hud_font)
draw_set_color(c_white)
draw_set_halign(fa_right)
draw_set_valign(fa_center)
text_outline(1910,1070,"FPS: " + string(fps), c_white)
draw_set_halign(fa_left)
draw_set_valign(fa_left)

/*for(i = 0; i &lt; ds_list_size(perks_list); i++)
{
    perk_slot = ds_list_find_value(perks_list, i)
    draw_text(10, 100+(32*i), string(global.perk_index[# perk_slot, perk_stats.name]))
}

//draw_text(x,y-32,string(inf_armor_time))
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(xprevious != x or yprevious!= y) image_index = 0
if(!instance_exists(dungeon_carver)) image_speed = 2/room_speed
if(berserking) image_blend = c_red
else image_blend = c_white

if(inf_armor_time &gt; 0)
{
    draw_set_color(c_olive)
    draw_circle(x,y,32,true)
    draw_circle(x,y,31,true)
    draw_circle(x,y,30,true)
    draw_circle(x,y,29,true)    
}

if(invincibility_timer &gt; 0)
{
    if(played_time%10)
    {
        rainbow_color = make_colour_hsv(irandom(255), 200, 255)
    }
    image_blend = rainbow_color
    draw_self()
}

else if(status = "VAMP" and hp &gt; 0)
{
    sprite_index = s_vampire_playable
    draw_self()
}

else if(status = "SKEL" and hp &gt; 0)
{
    sprite_index = s_wight_knight
    draw_self()
}

else if(job = class.slayer and hp &gt; 0)
{
    if(demon_form_time &gt; 0) sprite_index = s_demon_form
    else sprite_index = s_slayer
    draw_self()
}

else if(job = class.berserker and berserking)
{
    image_blend = c_red
    draw_self()
}

else if(stealth_timer &gt; 0)
{
    image_alpha = 0.5   
    draw_self()
}

else 
{
    image_alpha = 1
    image_blend = c_white
    //draw_text(x,y-32,enchanted_wep_timer)
    draw_self()
}

if(move_diagonal)
{
    draw_set_alpha(0.5)
    draw_sprite(s_left_arrow, 0, x-32,y-32)
    draw_sprite(s_right_arrow, 0, x+32,y+32)
    draw_sprite(s_up_arrow, 0, x+32,y-32)
    draw_sprite(s_down_arrow, 0, x-32,y+32)
    draw_set_alpha(1)
}

/*if(room = dungeon and instance_exists(enemy_parent))
{
    draw_set_alpha(0.3)
    mp_grid_draw(global.grid)
    draw_set_alpha(1)
    draw_flush()
}*/

if(instance_exists(enemy_parent))
{
    //with(enemy_parent) draw_path(path,x,y,1)   
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
