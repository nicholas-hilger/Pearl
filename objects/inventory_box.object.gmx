<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>menu_parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>index = 0
inventory = player.inventory
inventory_name = "Inventory"
size = player.inventory_limit
is_shop = false
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>upKey = player.upKey
downKey = player.downKey
equipKey = keyboard_check_pressed(vk_enter) or gamepad_button_check_pressed(0, gp_face1)
dropKey = keyboard_check_pressed(ord("D")) or gamepad_button_check_pressed(0, gp_face3)

if(!console.vis)
{
    if(upKey and ds_list_size(player.inventory) &gt; 0)
    {
        if(index = 0) index = ds_list_size(player.inventory)-1
        else index--
    }
    
    if(downKey and ds_list_size(player.inventory) &gt; 0) 
    {
        if(index = ds_list_size(player.inventory)-1) index = 0
        else index++
    }
    
    if(equipKey and ds_list_find_value(player.inventory, index) &gt; 0)
    {
        if(global.item_index[# ds_list_find_value(player.inventory, index), item_stat.type] = item_type.weapon)
        {
            if(player.job != class.slayer)
            {
                ds_list_insert(player.messages, 0, "You equip the " + string(global.item_index[# ds_list_find_value(player.inventory, index), item_stat.name]) + ".")
                if(player.weapon != 0) ds_list_add(player.inventory, player.weapon)
                if(global.item_index[# ds_list_find_value(player.inventory, index), item_stat.hands] = 2 and player.shield != item.none) 
                {
                    if(ds_list_size(player.inventory) &lt;= player.inventory_limit) ds_list_add(player.inventory,player.shield)
                    else 
                    {
                        with(instance_create(player.x,player.y,item_parent)) 
                        {
                            dropped = true
                            iid = player.shield
                        }
                    }
                    player.shield = item.none
                    ds_list_replace(player.equipped, 2, item.none)
                }
                player.weapon = ds_list_find_value(player.inventory, index)
                ds_list_delete(player.inventory, index)
                if(ds_list_size(player.inventory) = 0) ds_list_add(player.inventory, item.none)
                ds_list_replace(player.equipped, 0, player.weapon)
            }
            else
            {
                ds_list_insert(player.messages, 0, "You refuse to abandon your Slayer's Sword.")
            }
        }
        
        else if(global.item_index[# ds_list_find_value(player.inventory, index), item_stat.type] = item_type.armor)
        {
            ds_list_insert(player.messages, 0, "You wear the " + string(global.item_index[# ds_list_find_value(player.inventory, index), item_stat.name]) + ".")
            if(player.armor != 0) ds_list_add(player.inventory, player.armor)
            player.armor = ds_list_find_value(player.inventory, index)
            ds_list_delete(player.inventory, index)
            if(ds_list_size(player.inventory) = 0) ds_list_add(player.inventory, item.none)
            ds_list_replace(player.equipped, 1, player.armor)
        }
        
        else if(global.item_index[# ds_list_find_value(player.inventory, index), item_stat.type] = item_type.shield)
        {
            ds_list_insert(player.messages, 0, "You equip the " + string(global.item_index[# ds_list_find_value(player.inventory, index), item_stat.name]) + ".")
            if(player.shield != 0) ds_list_add(player.inventory, player.shield)
            if(global.item_index[# player.weapon, item_stat.hands] = 2) 
            {
                if(ds_list_size(player.inventory) &lt;= player.inventory_limit) ds_list_add(player.inventory,player.weapon)
                else 
                {
                    with(instance_create(player.x,player.y,item_parent)) 
                    {
                        dropped = true
                        iid = player.weapon
                    }
                }
                player.weapon = item.none
                ds_list_replace(player.equipped, 0, item.none)
            }
            player.shield = ds_list_find_value(player.inventory, index)
            ds_list_delete(player.inventory, index)
            if(ds_list_size(player.inventory) = 0) ds_list_add(player.inventory, item.none)
            ds_list_replace(player.equipped, 2, player.shield)
        }
        else if(global.item_index[# ds_list_find_value(player.inventory, index), item_stat.type] = item_type.food)
        {
            hunger_level = (player.energy/player.max_energy)
            if(hunger_level &gt; 0.5) verb = "consume"
            if(hunger_level &lt;= 0.5 and hunger_level &gt; 0) verb = "eagerly consume"
            else if(hunger_level = 0) verb = "desperately consume"
            ds_list_insert(player.messages, 0, "You " + string(verb) + " the " + string(global.item_index[# ds_list_find_value(player.inventory, index), item_stat.name]) + ".")
            
            en_gain = global.item_index[# ds_list_find_value(player.inventory, index), item_stat.hunger_gain]
            hp_gain = global.item_index[# ds_list_find_value(player.inventory, index), item_stat.health_gain] 
            
            if(list_contains(player.perks_gained, perk.gourmet))
            {
                en_gain = round(en_gain*1.25)
                hp_gain = round(hp_gain*1.25)
            }
            
            if(list_contains(player.perks_gained, perk.brain_food)) player.xp += round(player.max_xp*0.03)
            
            if(list_contains(player.perks_gained, perk.messy_eater) and global.item_index[# ds_list_find_value(player.inventory, index), item_stat.name] != "Scrap of Food")
            {
                scrap_chance = irandom(100)
                if(scrap_chance &lt; 15) 
                {
                    with(instance_create(player.x, player.y-16, hurt_text))
                    {
                        val = "Messy Eater!"
                        color = controller.brown
                    }
                    with(player) spawn_item(item.food_scrap)
                }
            }
            
            player.energy_gain += en_gain 
            player.health_gain += hp_gain
            player.strength += global.item_index[# ds_list_find_value(player.inventory, index), item_stat.str_gain]
            player.dexterity += global.item_index[# ds_list_find_value(player.inventory, index), item_stat.dex_gain]
            player.wisdom += global.item_index[# ds_list_find_value(player.inventory, index), item_stat.wis_gain]
            player.perception += global.item_index[# ds_list_find_value(player.inventory, index), item_stat.per_gain]
           
            check_potions(ds_list_find_value(player.inventory, index))
            
            if(global.item_index[# ds_list_find_value(player.inventory, index), item_stat.health_gain] &gt; 0)
            {
                gain_buff(buff.health_gain, hp_gain)
            }
            
            if(global.item_index[# ds_list_find_value(player.inventory, index), item_stat.hunger_gain] &gt; 0)
            {
                gain_buff(buff.energy_gain, en_gain)
            }
    
            ds_list_delete(player.inventory, index)
            if(ds_list_size(player.inventory) = 0) ds_list_add(player.inventory, item.none)
        }
        else if(global.item_index[# ds_list_find_value(player.inventory, index), item_stat.type] = item_type.tome)
        {
            spell_known = false
            for(i = 0; i &lt; ds_list_size(player.spells); i++)
            {
                if(ds_list_find_value(player.spells, i) = global.item_index[# ds_list_find_value(player.inventory, index), item_stat.spell_taught])
                {
                    ds_list_insert(player.messages, 0, "You already know that spell!")
                    spell_known = true
                    break
                }
            }
            if(!spell_known)
            {
                if(ds_list_find_value(player.spells, 0)) = spell.none
                {
                    ds_list_replace(player.spells, 0, global.item_index[# ds_list_find_value(player.inventory, index), item_stat.spell_taught])
                    ds_list_insert(player.messages, 0, "You learn " + string(global.spell_index[# ds_list_find_value(player.spells,0), spell_stat.name]) + "!")
                    ds_list_delete(player.inventory, index)
                    if(ds_list_size(player.inventory) = 0) ds_list_add(player.inventory, item.none)
                }
                else
                {
                    ds_list_add(player.spells, global.item_index[# ds_list_find_value(player.inventory, index), item_stat.spell_taught])
                    ds_list_insert(player.messages, 0, "You learn " + string(global.spell_index[# ds_list_find_value(player.spells,ds_list_size(player.spells)-1), spell_stat.name]) + "!")
                    ds_list_delete(player.inventory, index)
                    if(ds_list_size(player.inventory) = 0) ds_list_add(player.inventory, item.none)
                }
            }
        }
        if(index &gt; 0) index--
    }
    
    if(dropKey and ds_list_find_value(player.inventory, index) &gt; 0)
    {
        drop_item()
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
