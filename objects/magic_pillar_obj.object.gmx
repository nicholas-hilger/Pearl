<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_magic_pillar</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>0</persistent>
  <parentName>visible_object</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited()
name = "Arcane Pillar"

var targetX, targetY

cut = 0
blunt = 0
pierce = 0
magic = round(global.spell_index[# spell.magic_pillar, spell_stat.base_damage] + (global.item_index[# player.weapon, item_stat.magic]/2))

max_life = 5 + round(player.wisdom/2)

life = max_life

if(life &gt; 60) life = 60

active = false
found_target = false
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>targets = 0
if(instance_exists(target) and !found_target)
{
    x = target.x
    y = target.y
    found_target = true
    with(target) instance_destroy()
}

if(active and instance_exists(enemy_parent))
{
    target_pointer = 0
    for(i = 0; i &lt; instance_number(enemy_parent); i++)
    {
        en_chk = instance_find(enemy_parent,i)
        if(point_distance(x,y,en_chk.x,en_chk.y) &lt; (4*32) and !collision_line(x,y,en_chk.x,en_chk.y,wall,1,1))
        {
            targets[target_pointer] = instance_find(enemy_parent, i)
            target_pointer++
        }
    }
    if(array_length_1d(targets) &gt; 0)
    {
        for(i = 0; i &lt; array_length_1d(targets); i++)
        {
            with(instance_create(x,y,spell_trace))
            {
                enemy_target = other.targets[other.i]
                trace_color = c_purple
            }
            attack(self, targets[i])
        }
    }
    life--
    active = false
}

if(life = 0) instance_destroy()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited()
image_blend = c_white
if(found_target) draw_self()
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
