<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>console_messages = ds_list_create()
past_commands = ds_list_create()
past_commands_index = -1

repeat(12) ds_list_insert(console_messages, 0, "") 
ds_list_insert(console_messages, 0, "Welcome to the Pearl Development Console.")
ds_list_insert(console_messages, 0, "Type 'help_1', 'help_2', or 'help_3' for a list of commands.")

keyboard_string = ""

item_map = ds_map_create()
enemy_map = ds_map_create()
perk_map = ds_map_create()

for(i = 0; i &lt; item.total; i++)
{
    ds_map_add(item_map, global.item_index[# i, item_stat.spawn_id], i)
}
for(i = 1; i &lt; enemy.total; i++)
{
    ds_map_add(enemy_map, global.enemy_index[# i, enemy_stat.spawn_id], i)
}
for(i = 1; i &lt; perk.total; i++)
{
    ds_map_add(perk_map, global.perk_index[# i, perk_stats.perk_id], i)
}

destroyable = false
vis = false
verbose = false
show_stats = false
switch_time = 0
switch_show = true
cursor_pos = 18
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(instance_exists(player))
{
    x = player.x
    y = player.y
}
if(!vis) keyboard_string = ""

if(switch_time &lt; 30) switch_time++

if(switch_time = 30)
{
    switch_time = 0
    if(switch_show) switch_show = false
    else switch_show = true   
}

command = ""
value = ""

cursor_pos = 20 + (string_length(keyboard_string)*17)

if(keyboard_check_pressed(vk_enter) and vis = true)
{
    command = keyboard_string
    ds_list_insert(console_messages, 0, "&gt; " + string(command))
    past_commands_index = -1
    ds_list_insert(past_commands, 0, command)
    array = ds_list_create()
    string_split(command, " ", array)
    if(ds_list_size(array) = 2)
    {
        command = ds_list_find_value(array, 0)
        value = ds_list_find_value(array, 1)
    }
    
    if(command = "help_1")
    {
        ds_list_insert(console_messages, 0, "Commands, page 1: ")
        ds_list_insert(console_messages, 0, "help_1, help_2, help_3: navigate between different help pages.")
        ds_list_insert(console_messages, 0, "spawn_item (spawn_id): spawn an item based on its spawn_id.")
        ds_list_insert(console_messages, 0, "spawn_enemy (spawn_id): spawn an enemy based on its spawn_id.")
        ds_list_insert(console_messages, 0, "goto_town: return to town.")
        ds_list_insert(console_messages, 0, "full_heal: restore health and energy to max.")
        ds_list_insert(console_messages, 0, "die: kill your character.")
        ds_list_insert(console_messages, 0, "quake: damage all enemies on the current floor.")
        ds_list_insert(console_messages, 0, "genocide: kill all enemies on the current floor.")
        ds_list_insert(console_messages, 0, "level_up: gain one level.")
        ds_list_insert(console_messages, 0, "gain_levels (num): gain num levels. overflow occurs in the 700s.")
        ds_list_insert(console_messages, 0, "gain_money (num): gain num gold.")
        ds_list_insert(console_messages, 0, "gain_ammo (num): gain num ammo.")
        ds_list_insert(console_messages, 0, "godmode: become as gods. use again to return to mortality.")
    }
    else if(command = "help_2")
    {
        ds_list_insert(console_messages, 0, "Commands, page 2: ")
        ds_list_insert(console_messages, 0, "debug: toggle debug info on and off.")
        ds_list_insert(console_messages, 0, "ascend: ascend one floor.")
        ds_list_insert(console_messages, 0, "descend: descend one floor.")
        ds_list_insert(console_messages, 0, "ascend_multi (num): ascend num floors.")
        ds_list_insert(console_messages, 0, "descend_multi (num): descend num floors,")
        ds_list_insert(console_messages, 0, "gain_strength (num): gain num points in strength.")
        ds_list_insert(console_messages, 0, "gain_dexterity (num): gain num points in dexterity.")
        ds_list_insert(console_messages, 0, "gain_wisdom (num): gain num points in wisdom.")
        ds_list_insert(console_messages, 0, "gain_perception (num): gain num points in perception.")
        ds_list_insert(console_messages, 0, "clear_console: clear the console's text log.")
        ds_list_insert(console_messages, 0, "clear_messages: clear the player's message log.")
        ds_list_insert(console_messages, 0, "verbose_attacks: print details in the console for every attack made.")
        ds_list_insert(console_messages, 0, "pools_used: print a list of the pool used for each item on the floor.")
    }
    else if(command = "help_3")
    {
        ds_list_insert(console_messages, 0, "Commands, page 3: ")
        ds_list_insert(console_messages, 0, "enemy_list: list all enemies on the floor")
        ds_list_insert(console_messages, 0, "enemy_stats: lists the stats of any enemy hit")
        ds_list_insert(console_messages, 0, "give_perk (perk_id): give yourself a perk based on its id")
    }
    else if(command = "spawn_item")
    {
        if(item_map[? value])
        {
            iid = item_map[? value]
            ds_list_insert(console_messages, 0, "Spawning " + string(global.item_index[# iid, item_stat.name]) + ".")
            spawn_item(iid)
        }
        else ds_list_insert(console_messages, 0, "Error: Item '" + string(value) + "' not found.")
    }
    else if(command = "spawn_enemy")
    {
        if(enemy_map[? value])
        {
            eid = enemy_map[? value]
            ds_list_insert(console_messages, 0, "Spawning " + string(global.enemy_index[# eid, enemy_stat.name]) + ".")
            with(instance_create(x,y,enemy_parent)) 
            {   
                eid = console.eid
                spawn_enemy(player.x,player.y,console.eid)
            }
        }
        else ds_list_insert(console_messages, 0, "Error: Enemy '" + string(value) + "' not found.")
    }
    else if(command = "goto_town")
    {
        ds_list_insert(console_messages, 0, "Teleporting to town.")
        room_goto(town)
        player.x = 848
        player.y = 400
        floors = 0
    }
    else if(command = "full_heal")
    {
        ds_list_insert(console_messages, 0, "Rejuvenating player.")
        player.hp = player.max_hp
        player.energy = player.max_energy
    }
    else if(command = "die") player.hp = 0
    else if(command = "quake") 
    {
        ds_list_insert(console_messages, 0, "Violently colliding tectonic plates.")
        instance_create(0,0,quake_spell)
    }
    else if(command = "genocide") 
    {
        ds_list_insert(console_messages, 0, "Purging all enemies for the glory of humanity.")
        with(enemy_parent) hp = 0
    }
    else if(command = "level_up") 
    {  
        ds_list_insert(console_messages, 0, "Leveling up player.")
        with(player)
        { 
            level_up()
            xp = 0
        }
    }
    else if(command = "gain_levels")
    {
        if(string(real(value)) = string(value))
        {
            ds_list_insert(console_messages, 0, "Leveling up player " + string(value) + " times.")
            with(player)
            {
                repeat(real(other.value)) level_up()
                xp = 0
            }
        }
        else ds_list_insert(console_messages, 0, "Error: Please specify levels to be gained in number form (1, 5, 1000, etc.).")
    }
    else if(command = "gain_money")
    {
        if(string(real(value)) = string(value))
        {
            ds_list_insert(console_messages, 0, "Giving player " + string(value) + " money.")
            player.money += real(value)
            player.total_money += real(value)
        }
        else ds_list_insert(console_messages, 0, "Error: Please specify money to be gained in number form (1, 5, 1000, etc.).")
    }
    else if(command = "gain_ammo")
    {
        if(string(real(value)) = string(value))
        {
            ds_list_insert(console_messages, 0, "Giving player " + string(value) + " ammo.")
            player.ammo += real(value)
        }
        else ds_list_insert(console_messages, 0, "Error: Please specify ammo to be gained in number form (1, 5, 1000, etc.).")
    }
    else if(command = "godmode")
    {
        if(!player.godmode_enabled)
        {
            player.godmode_enabled = true
            ds_list_insert(console_messages, 0, "Transcending physical needs.")
        }
        else
        {
            player.godmode_enabled = false
            ds_list_insert(console_messages, 0, "No longer do you walk among the gods.")
        }   
    }
    else if(command = "debug")
    {
        if(player.debugShow) 
        {
            player.debugShow = false
            ds_list_insert(console_messages, 0, "Debug info OFF.")
        }
        else
        {
            player.debugShow = true
            ds_list_insert(console_messages, 0, "Debug info ON.")
        }
    }
    else if(command = "ascend")
    {
        player.floors++
        if(room = town) room_goto(dungeon)
        else room_restart()
    }
    else if(command = "descend")
    {
        if(player.floors &gt; 1)
        {
            player.floors--
            room_restart()
        }
        else ds_list_insert(console_messages, 0, "Error: Cannot descend from here.")
    }
    else if(command = "ascend_multi")
    {
        if(string(real(value)) = string(value))
        {
            player.floors += real(value)
            if(room = town) room_goto(dungeon)
            else room_restart()
        }
        else ds_list_insert(console_messges, 0, "Error: Please specify floors to ascend in number form (1, 5, 1000, etc.).")
    }
    else if(command = "descend_multi")
    {
        if(string(real(value)) = string(value))
        {
            player.floors -= real(value)
            if(player.floors &lt; 1) player.floors = 1
            room_restart()
        }
        else ds_list_insert(console_messges, 0, "Error: Please specify floors to descend in number form (1, 5, 1000, etc.).")
    }
    else if(command = "gain_strength")
    {
        if(string(real(value)) = string(value))
        {
            ds_list_insert(console_messages, 0, "Giving player " + string(value) + " points in strength.")
            player.strength += real(value)
        }
        else ds_list_insert(console_messges, 0, "Error: Please specify strength to be gained in number form (1, 5, 1000, etc.).")
    }
    else if(command = "gain_dexterity")
    {
        if(string(real(value)) = string(value))
        {
            ds_list_insert(console_messages, 0, "Giving player " + string(value) + " points in dexterity.")
            player.dexterity += real(value)
        }
        else ds_list_insert(console_messges, 0, "Error: Please specify dexterity to be gained in number form (1, 5, 1000, etc.).")
    }
    else if(command = "gain_wisdom")
    {
        if(string(real(value)) = string(value))
        {
            ds_list_insert(console_messages, 0, "Giving player " + string(value) + " points in wisdom.")
            player.wisdom += real(value)
        }
        else ds_list_insert(console_messges, 0, "Error: Please specify wisdom to be gained in number form (1, 5, 1000, etc.).")
    }
    else if(command = "gain_perception")
    {
        if(string(real(value)) = string(value))
        {
            ds_list_insert(console_messages, 0, "Giving player " + string(value) + " points in perception.")
            player.perception += real(value)
        }
        else ds_list_insert(console_messges, 0, "Error: Please specify perception to be gained in number form (1, 5, 1000, etc.).")
    }
    else if(command = "clear_console") 
    {
        ds_list_clear(console_messages)
        repeat(15) ds_list_insert(console_messages, 0, "")
    }
    else if(command = "clear_messages") 
    {
        ds_list_clear(player.messages)
        ds_list_insert(console_messages, 0, "Message log cleared.")
        repeat(15) ds_list_insert(player.messages, 0, "")
    }
    else if(command = "fuck" or command = "shit" or command = "ass" or value = "fuck" or value = "shit" or value = "ass")
    {
        ds_list_insert(console_messages, 0, "Back at you, polite player.")
    }
    else if(command = "verbose_attacks")
    {
        if(verbose)
        {
            ds_list_insert(console_messages, 0, "Attack verbosity now OFF")
            verbose = false
        }
        else
        {
            ds_list_insert(console_messages, 0, "Attack verbosity now ON")
            verbose = true
        }  
    }
    else if(command = "pools_used")
    {
        if(instance_exists(item_parent))
        {
            with(item_parent)
            {
                ds_list_insert(console.console_messages, 0, string(name) + ": " + string(pool_name))
            }
        }
        else ds_list_insert(console_messages, 0, "No items found on floor.")
    }
    
    else if(command = "enemy_list")
    {
        if(instance_number(enemy_parent) = 0) ds_list_insert(console_messages, 0, "\# No enemies on the floor.")
        else
        {
            for(i = 0; i &lt; instance_number(enemy_parent); i++)
            {
                with(instance_find(enemy_parent,i)) ds_list_insert(console.console_messages, 0, "\# " + string(name))
            } 
        }
    }
    else if(command = "enemy_stats") 
    {
        if(!show_stats)
        {
            ds_list_insert(console_messages, 0, "Showing enemy stats.")
            show_stats = true
        }
        else
        {
            ds_list_insert(console_messages, 0, "Not showing enemy stats.")
            show_stats = false
        }
    }
    else if(command = "give_perk")
    {
        if(perk_map[? value])
        {
            pid = perk_map[? value]
            ds_list_insert(console_messages, 0, "Giving " + string(global.perk_index[# pid, perk_stats.name]) + ".")
            check_perks(pid)
            ds_list_add(player.perks_gained, pid)
            if(list_contains(player.perks_list, pid))
            {
                perk_deleted = ds_list_find_index(player.perks_list, pid)
                ds_list_delete(player.perks_list, perk_deleted)
            }
        }
        else ds_list_insert(console_messages, 0, "Error: Perk '" + string(value) + "' not found.")
    }
    else
    {
        ds_list_insert(console_messages, 0, "Error: Unknown command '" + string(command) + "'. Type 'help_1', 'help_2', or 'help_3' for a list of commands and values.")
    }
    
    keyboard_string = ""
}

if(keyboard_check_pressed(vk_up))
{
    if(past_commands_index &lt; ds_list_size(past_commands))
    {
        past_commands_index++
        keyboard_string = ds_list_find_value(past_commands, past_commands_index)
    }
    else 
    {
        past_commands_index = 0
        keyboard_string = ds_list_find_value(past_commands, past_commands_index)
    }
}
if(keyboard_check_pressed(vk_down))
{
    if(past_commands_index &gt; 0)
    {
        past_commands_index--
        keyboard_string = ds_list_find_value(past_commands, past_commands_index)
    }
    else 
    {
        past_commands_index = ds_list_size(past_commands)
        keyboard_string = ds_list_find_value(past_commands, past_commands_index)
    }
}

if(keyboard_check_pressed(vk_escape)) vis = false
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(vis)
{
    draw_set_color(c_white)
    draw_rectangle(-1,1080, 1919, view_hview+100, true)
    draw_set_color(c_black)
    draw_rectangle(-1,1080, 1919, view_hview+100, false)
    draw_set_color(c_white)
    draw_rectangle(0,1080,1919,1045,true)
    
    if(switch_show)
    {
        draw_rectangle(cursor_pos, 1050, (cursor_pos+16),1075, false) 
    }
    
    draw_set_font(console_font)
    draw_set_halign(fa_left)
    draw_text(2,1050,"~" + string(keyboard_string))
    
    for(i = 0; i &lt; 14; i++)
    {
        draw_text(2,(1010-(32*i)),string(ds_list_find_value(console_messages,i)))
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
