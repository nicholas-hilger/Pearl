<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>menu_parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>index = 0
inventory_name = "Spells"
is_shop = false
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>upKey = player.upKey
downKey = player.downKey
equipKey = keyboard_check_pressed(vk_enter) or gamepad_button_check_pressed(0, gp_face1)

if(!console.vis)
{
    if(upKey and ds_list_size(player.spells) &gt; 0)
    {
        if(index = 0) index = ds_list_size(player.spells)-1
        else index--
    }
    
    if(downKey and ds_list_size(player.spells) &gt; 0) 
    {
        if(index = ds_list_size(player.spells)-1) index = 0
        else index++
    }
    
    if(equipKey and ds_list_find_value(player.spells, index) &gt; 0)
    {
        if(player.energy &gt;= global.spell_index[# ds_list_find_value(player.spells,index), spell_stat.energy_cost])
        {
            if(global.spell_index[# ds_list_find_value(player.spells,index), spell_stat.spell_type] != spell_type.auto_cast)
            {
                if(instance_exists(enemy_parent) and point_distance(player.x,player.y,instance_nearest(player.x,player.y,enemy_parent).x,instance_nearest(player.x,player.y,enemy_parent).y) &lt; player.fov)
                { 
                    nearest_enemy = instance_nearest(x,y,enemy_parent)
                    if(!collision_line(player.x,player.y, nearest_enemy.x, nearest_enemy.y, wall, true, true))
                    {
                        with(instance_create(nearest_enemy.x,nearest_enemy.y,spell_selector))
                        {
                            sid = ds_list_find_value(player.spells,other.index)
                        }
                    }
                    else
                    {
                        with(instance_create(player.x,player.y,spell_selector))
                        {
                           sid = ds_list_find_value(player.spells,other.index)
                        }
                    }
                }
                else
                {
                    with(instance_create(player.x,player.y,spell_selector))
                    {
                        sid = ds_list_find_value(player.spells,other.index)
                    }
                }
            }
            else use_spells(ds_list_find_value(player.spells, index))
        }
        else ds_list_insert(player.messages, 0, "You don't have enough energy to cast that!")
        instance_destroy()
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_font(hud_font)
draw_set_color(c_black)
draw_rectangle(8,175,308,220 + (24*ds_list_size(player.spells)),false)
draw_rectangle(309, 175, 1300, 415, false)  

draw_set_color(c_white)
draw_rectangle(7,174,309,220 + (24*ds_list_size(player.spells))+1,true)
draw_rectangle(308,174,1299, 414, true)

draw_rectangle(10,215 + (24*index),306, 240 + (24*index),true)

current_item = ds_list_find_value(player.spells, index)

draw_set_halign(fa_left)
draw_text(12,180, "Spells")

for(i = 0; i &lt; ds_list_size(player.spells); i++)
{
    /*tier_color = global.item_index[# ds_list_find_value(player.inventory, i), item_stat.tier] 
    draw_set_color(controller.tier[tier_color])*/
    draw_text(12, 220 + (24*i), global.spell_index[# ds_list_find_value(player.spells,i), spell_stat.name])
    draw_set_color(c_white)
}
if(current_item &gt; 0)
{
    draw_set_color(c_purple)
    draw_text(313, 188, "Base Damage: " + string(global.spell_index[# current_item, spell_stat.base_damage]))
    if(global.spell_index[# current_item, spell_stat.energy_cost] &gt; 0) 
    {
        draw_set_color(controller.brown)
        draw_text(663, 188, "Energy Cost: " + string(global.spell_index[# current_item, spell_stat.energy_cost]))
    }
    else if(global.spell_index[# current_item, spell_stat.essence_cost] &gt; 0)
    {
        draw_set_color(c_olive)
        draw_text(663, 188, "Essence Cost: " + string(global.spell_index[# current_item, spell_stat.essence_cost]) + "%")
    }
    draw_set_color(c_white)
    draw_text_ext(313, 220, global.spell_index[# current_item, spell_stat.description], 24, 987)
}

else if(current_item = spell.none)
{
    draw_text(313, 188, "You have no spells. Learn them from Tomes!")
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
