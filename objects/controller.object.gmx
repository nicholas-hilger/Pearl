<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100000</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.ver_number = 8
global.ver_title = "Karnage de Kafka"

item_enum()
enemy_enum()
class_enum()
spell_enum()
buff_enum()
conpendium_enum()
perk_enum()

global.item_index = ds_grid_create(item.total,item_stat.total)
global.enemy_index = ds_grid_create(enemy.total, enemy_stat.total)
global.class_index = ds_grid_create(class.total, class_stat.total)
global.spell_index = ds_grid_create(spell.total, spell_stat.total)
global.buff_index = ds_grid_create(buff.total, buff_stat.total)
global.topic_index = ds_grid_create(topic.total, topic_stats.total)
global.perk_index = ds_grid_create(perk.total, perk_stats.total)

ds_grid_clear(global.item_index, 0)

init_items()
init_enemies()
init_classes()
init_spells()
init_buffs()
init_conpendium()
init_perks()

init_item_pools()
init_enemy_pools()

randomize()

minute = 0
hour = 8

//Tier colors

brown = make_color_rgb(139,69,19)
orange = make_color_rgb(255,171,0)
cyan = make_color_rgb(163,208,220)
pink = make_color_rgb(255,105,180)
divine = make_color_rgb(255,250,205)

tier[0] = brown //food
tier[1] = c_gray //starter crap
tier[2] = c_white //less crap
tier[3] = c_lime //aight
tier[4] = c_blue //pretty good
tier[5] = c_aqua //yeah lets rock
tier[6] = divine //angellic gear
tier[7] = c_maroon //devil (may cry) gear
tier[8] = pink //current top-tier
tier[9] = c_purple //tomes

tier[99] = c_red

grid_timer = 60

if(file_exists("save.sav")) start_index = 1
else start_index = 0
char_index = 1

char_name = ""

y_off=0

load_player = false

if(file_exists("config.cfg")) load_config()
else
{
    global.music_vol = 0.7
    global.sfx_vol = 0.7
    global.loot_pickup = true
    global.fullscreen = true
    global.animation_size = 1
    global.show_hp_bars = true
    global.item_notifications = true
    global.show_elite_names = true
    global.loot_particles = true
    save_config()
}

adjust_sounds()


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>upKey = keyboard_check_pressed(vk_up) or gamepad_button_check_pressed(0 , gp_padu)
downKey = keyboard_check_pressed(vk_down) or gamepad_button_check_pressed(0 , gp_padd)
confirmKey = keyboard_check_pressed(vk_enter) or gamepad_button_check_pressed(0 , gp_face1)
backKey = keyboard_check_pressed(vk_escape) or gamepad_button_check_pressed(0 , gp_face2)
randomKey = keyboard_check_pressed(vk_control)
rightKey = keyboard_check_pressed(vk_right) or gamepad_button_check_pressed(0 , gp_padr)
leftKey = keyboard_check_pressed(vk_left) or gamepad_button_check_pressed(0 , gp_padl)

if(minute = 60)
{
    minute = 0
    if(hour &lt; 23) hour++
    else
    {
        hour = 0
        player.days++
        ds_list_insert(player.messages, 0, "A new day dawns. Shops have new inventory.")
        with(merchant)
        {
            if(name != "Innkeeper") 
            {
                ds_list_clear(inventory)
                repeat(5) ds_list_insert(inventory, 0, pool[irandom(array_length_1d(pool)-1)])
            }
        }
    }
}

if(room = start_room)
{
    if(backKey) start_index = 3
    if(upKey)
    {
        if(start_index &gt; 0) start_index--
        else start_index = 3
    }
    
    if(downKey)
    {
        if(start_index &lt; 3) start_index++
        else start_index = 0
    }
    
    if(confirmKey)
    {
        if(start_index = 0) room_goto(char_room)
        if(start_index = 1) 
        {
            if(file_exists("save.sav")) 
            {
                load_player = true
                room_goto(town)
            }
        }
        if(start_index = 2) 
        {
            room_goto(options_room)
            index = 0
        }
        if(start_index = 3) game_end()
    }
}

if(room = char_room)
{
    if(backKey) room_goto(start_room)
    if(upKey)
    {
        if(char_index &gt; 1) char_index--
        else char_index = (class.total-1)
    }
    
    if(downKey)
    {
        if(char_index &lt; (class.total-1)) char_index++
        else char_index = 1
    }
    
    if(randomKey)
    {
        room_goto(name_room)
        char_index = irandom_range(1, class.total-1)
        keyboard_string = ""
    }
    
    if(confirmKey)
    {
        room_goto(name_room)
        keyboard_string = ""
    }
}

if(room = name_room)
{
    if(backKey) room_goto(char_room)
    if(string_length(keyboard_string) &lt; 12)
    {
        char_name = keyboard_string
    }
    else
    {
        keyboard_string = char_name    
    }
    
    if(randomKey)
    {
        keyboard_string = random_name()
    }
    
    if((keyboard_check_pressed(vk_enter) or gamepad_button_check_pressed(0, gp_start)) and string_length(char_name) &gt; 0)
    {
        load_player = false
        if(file_exists("save.sav")) file_delete("save.sav")
        room_goto(town)
    }
}

if(room = options_room)
{
    if(backKey)
    {
        save_config()
        room_goto(start_room)
    }
    
    if(upKey)
    {
        if(index = 0) index = 9
        else index--
    }
    if(downKey)
    {
        if(index = 9) index = 0
        else index++
    }
    if(rightKey)
    {
        if(index = 0 and global.music_vol &lt; 1) 
        {
            global.music_vol += 0.1 
            adjust_sounds()
        }
        if(index = 1 and global.sfx_vol &lt; 1)
        {
            global.sfx_vol += 0.1
            adjust_sounds()
            audio_play_sound(sfx_cut, 1, 0)
        }
        if(index = 2)
        {
            if(global.loot_pickup) global.loot_pickup = false
            else global.loot_pickup = true
        }
        if(index = 3)
        {
            if(global.fullscreen) global.fullscreen = false
            else global.fullscreen = true
            window_set_fullscreen(global.fullscreen)
        }
        if(index = 4)
        {
            if(global.animation_size &lt; 1) global.animation_size += 0.25 
        }
        if(index = 5)
        {
            if(global.show_hp_bars) global.show_hp_bars = false
            else global.show_hp_bars = true
        }
        if(index = 6)
        {
            if(global.item_notifications) global.item_notifications = false
            else global.item_notifications = true
        }
        if(index = 7)
        {
            if(global.show_elite_names) global.show_elite_names = false
            else global.show_elite_names = true
        }
        if(index = 8)
        {
            if(global.show_elite_names) global.loot_particles = false
            else global.loot_particles = true 
        }
    }
    if(leftKey)
    {
        if(index = 0 and global.music_vol &gt; 0) 
        {   
            global.music_vol -= 0.1 
            adjust_sounds()
        }        
        if(index = 1 and global.sfx_vol &gt; 0) 
        {
            global.sfx_vol -= 0.1
            adjust_sounds()
            audio_play_sound(sfx_cut, 1, 0)
        }
        if(index = 2)
        {
            if(global.loot_pickup) global.loot_pickup = false
            else global.loot_pickup = true
        }
        if(index = 3)
        {
            if(global.fullscreen) global.fullscreen = false
            else global.fullscreen = true
            window_set_fullscreen(global.fullscreen)
        }
        if(index = 4)
        {
            if(global.animation_size &gt; 0) global.animation_size -= 0.25 
        }
        if(index = 5)
        {
            if(global.show_hp_bars) global.show_hp_bars = false
            else global.show_hp_bars = true
        }
        if(index = 6)
        {
            if(global.item_notifications) global.item_notifications = false
            else global.item_notifications = true
        }
        if(index = 7)
        {
            if(global.show_elite_names) global.show_elite_names = false
            else global.show_elite_names = true
        }
        if(index = 8)
        {
            if(global.loot_particles) global.loot_particles = false
            else global.loot_particles = true
        }
    }
    if(confirmKey and index = 9)
    {
        global.music_vol = 0.7
        global.sfx_vol = 0.7
        global.loot_pickup = true
        global.fullscreen = true
        window_set_fullscreen(global.fullscreen)
        zoomed = 4
        global.animation_size = 1
        global.show_hp_bars = true
        global.item_notifications = true
        global.show_elite_names = true
        global.loot_particles = true
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(room = dungeon) mp_grid_destroy(global.grid)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>display_set_gui_size(1920,1080)
ideal_width = display_manager.ideal_width
ideal_height = display_manager.ideal_height

name_shown = ""
lvl_shown = 0
job_num = 0

if(file_exists("save.sav"))
{
ini_open("save.sav")

name_shown = ini_read_string("Save1","name","")
lvl_shown = ini_read_real("Save1","lvl",1)
job_num = ini_read_real("Save1","job",class.adventurer)

ini_close()
job_shown = global.class_index[# job_num, class_stat.name]
}

if(room = start_room)
{
    display_set_gui_size(1920,1080)
    draw_set_color(c_white)
    string_len[0] = "New Game"
    if(name_shown = "") string_len[1] = "--------"
    else string_len[1] = "Load (" + string(name_shown) + ", Lvl " + string(lvl_shown) + " " + string(job_shown) + ")"
    string_len[2] = "Options"
    string_len[3] = "Exit"
    
    //draw_rectangle((display_get_gui_width()/2 - 300), (480+(start_index*125)),(display_get_gui_width()/2 + 300), (580+(start_index*125)),1)
    draw_rectangle((display_get_gui_width()/2 - (string_width(string_len[start_index])+128)),(480+(start_index*125)), (display_get_gui_width()/2 + (string_width(string_len[start_index])+128)), 580+(start_index*125),1)
    draw_rectangle((display_get_gui_width()/2 - (string_width(string_len[start_index])+127)),(479+(start_index*125)), (display_get_gui_width()/2 + (string_width(string_len[start_index])+127)), 579+(start_index*125),1)
    
    draw_set_font(menu_font)
    draw_set_halign(fa_center)
    draw_set_valign(fa_left)
    draw_set_color(c_gray)
    draw_text(display_get_gui_width()/2, 100, "Pearl")
    draw_set_color(c_aqua)
    draw_text((display_get_gui_width()/2)+4,104,"Pearl")
    draw_set_color(c_white)
    draw_set_font(desc_font)
    draw_text((display_get_gui_width()/2),180,"(Alpha " + string(global.ver_number) +": " + string(global.ver_title) + ")")
    draw_set_font(menu_font)
    if(name_shown = "") draw_text(display_get_gui_width()/2, 500, "New Game##--------##Options##Exit")
    else draw_text(display_get_gui_width()/2, 500, "New Game##Load (" + string(name_shown) + ")##Options##Exit")
    draw_set_font(hud_font)
    draw_text(display_get_gui_width()/2, display_get_gui_height()-96, "Game: Nicholas Hilger, 2018-2019")
    draw_text(display_get_gui_width()/2, display_get_gui_height()-64, "Tileset: DawnLike, by DragonDePlatino on OpenGameArt.org")
    draw_text(display_get_gui_width()/2, display_get_gui_height()-32, "Music: Stefan Grossmann")
    draw_set_halign(fa_right)
    draw_set_valign(fa_bottom)
    draw_text(display_get_gui_width(),display_get_gui_height(),"[Enter]: Accept")
    draw_set_halign(fa_left)
    draw_text(0,display_get_gui_height(),"[ESC]: Exit")
}

if(room = char_room)
{
    display_set_gui_size(ideal_width,ideal_height)
    draw_set_color(c_white)
    for(i = 1; i &lt; class.total; i++)
    {
        draw_sprite(global.class_index[#i, class_stat.sprite], 0, 50, 10+(i*48))
    }
    draw_rectangle(25,(35+((char_index-1)*48)),75,(75+((char_index-1)*48)),1)
    draw_set_font(hud_font)
    draw_set_halign(fa_left)
    draw_set_valign(fa_center)
    draw_text_ext(90, 200, string(global.class_index[# char_index, class_stat.name]) + ": " + string(global.class_index[# char_index, class_stat.description] + "##Passive: " + global.class_index[# char_index, class_stat.passive]), 24, 700)
    draw_set_halign(fa_right)
    draw_set_valign(fa_bottom)
    draw_set_font(hurt_font)
    draw_text(display_get_gui_width(),display_get_gui_height(),"[Enter]: Accept")
    draw_set_halign(fa_center)
    draw_text(display_get_gui_width()/2,display_get_gui_height(),"[Ctrl]: Random Class")
    draw_set_halign(fa_left)
    draw_text(0,display_get_gui_height(),"[ESC]: Back")
}

if(room = name_room)
{
    draw_set_font(hud_font)
    display_set_gui_size(ideal_width,ideal_height)
    draw_text(10,50, "Class: " + string(global.class_index[#char_index, class_stat.name]))
    draw_text(10,100, "Name:  " + string(char_name))
    draw_set_halign(fa_right)
    draw_set_valign(fa_bottom)
    draw_set_font(hurt_font)
    draw_text(display_get_gui_width(),display_get_gui_height(),"[Enter]: Begin!")
    draw_set_halign(fa_center)
    draw_text(display_get_gui_width()/2,display_get_gui_height(),"[Ctrl]: Random Name")
    draw_set_halign(fa_left)
    draw_text(0,display_get_gui_height(),"[ESC]: Back")
    draw_set_font(hud_font)
}

if(room = options_room)
{
    display_set_gui_size(ideal_width,ideal_height)
    if(global.loot_pickup) loot = "Yea"
    else loot = "Nay"
    
    if(global.fullscreen) fullscrn = "Yea"
    else fullscrn = "Nay"
    
    if(global.show_hp_bars) hp_bars = "Yea"
    else hp_bars = "Nay"
    
    if(global.item_notifications) item_notes = "Yea"
    else item_notes = "Nay"
    
    if(global.show_elite_names) elite_names = "Yea"
    else elite_names = "Nay"
    
    if(global.animation_size = 1) anim = "Large"
    else if(global.animation_size = 0.75) anim = "Medium"
    else if(global.animation_size = 0.5) anim = "Small"
    else if(global.animation_size = 0.25) anim = "Tiny"
    else anim = "Invisible"
    
    if(global.loot_particles) loot_parts = "Yea"
    else loot_parts = "Nay"
    
    draw_set_font(hud_font)
    draw_text(20, 50, "Options:")
    draw_text(20, 82, "Music Vol.: &lt; " + string(round(global.music_vol*100)) + "% &gt; ")
    draw_text(20, 114, "SFX Vol.: &lt; " + string(round(global.sfx_vol*100)) + "% &gt; ")
    draw_text(20, 146, "Auto-grab Loot: &lt; " + string(loot) + " &gt; ")
    draw_text(20, 178, "Fullscreen: &lt; " + string(fullscrn) + " &gt; ")
    draw_text(20, 210, "Animation Size: &lt; " + string(anim) + " &gt; ")
    draw_text(20, 242, "Health Bars: &lt; " + string(hp_bars) + " &gt; ")
    draw_text(20, 274, "Item Notifications: &lt; " + string(item_notes) + " &gt; ")
    draw_text(20, 306, "Elite Nameplates: &lt; " + string(elite_names) + " &gt; ")
    draw_text(20, 338, "Loot Particles: &lt; " + string(loot_parts) + " &gt; ")
    draw_text(20, 370, "Restore Defaults")
    
    draw_text(2, 82+(32*index), "&gt;")
    draw_set_font(hurt_font)
    draw_set_halign(fa_right)
    draw_set_valign(fa_bottom)
    draw_text(display_get_gui_width(),display_get_gui_height(),"[Left]/[Right]: Change Settings")
    draw_set_halign(fa_center)
    draw_text(display_get_gui_width()/2,display_get_gui_height(),"[Enter]: Confirm")
    draw_set_halign(fa_left)
    draw_text(0,display_get_gui_height(),"[ESC]: Save and Exit")
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
